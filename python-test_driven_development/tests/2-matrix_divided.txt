2-matrix_divided.py is the function that we are explain how it will work
=========================================================================
this will take a number and divide it to the each element in matrix
===========================================================================
Now let exlore the function and see how it work with example and expression
============================================================================
::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [
	...	[2, 4, 6],
	...	[8, 10, 12]
	... ]
	>>> print(matrix_divided(matrix, 2))
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
	
	>>> print(matrix)
	[[2, 4, 6], [8, 10, 12]]

This function works also with floating numbers
::
	>>> matrix = [
	...	[2.2, 4.0, 6.4],
	...	[10.0, 8.2, 10.6]
	... ]
	>>> print(matrix_divided(matrix, 2))
	[[1.1, 2.0, 3.2], [5.0, 4.1, 5.3]]

This works even if matrix element involve float and function at the same time
::
	>>> matrix= [
	...	[2, 0.8, -6.8],
	...	[-4.4, 2.4, -6]
	... ]
	>>> print(matrix_divided(matrix, 2))
	[[1.0, 0.4, -3.4], [-2.2, 1.2, -3.0]]

If the wrong matrix is Givet the Error will rise
====================================================
If matrix is not nested list of int or float TypeError will be raised
::
	>>> matrix = "hello world"
	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = None
	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = []
	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [[]]
	>>> print(matrix_divided(matrix, 2))
	[[]]

If matrix is  not a list of lists TypeError will be raised
::
	>>> matrix = [1, 2, 3]
	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

If one element of matrix is neither int or float TypeError will be raised
::
	>>> matrix = [
	...	[3, 5, 98],
	...	[2, "not a number", 3.4]
	... ]
	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

All rows of matrix must be equal otherwise the Typeerror will be raised
::
	>>> matrix = [
	...	[5, 6, 9.0, -4],
	...	[4, 3,7.5]
	... ]
	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

``div`` parameter should be int or float otherwise Error will be raised
::
	matrix = [
	...	[3, 4, 6],
	...	[5, 7, 9]
	... ]
	>>> print(matrix_divided(matrix, "2"))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size
	
	>>> print(matrix_divided(matrix, None))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

div must be different to zero otherwise ZeroDivisionError could rise
::
	matrix = [
	...	[9, 5, 9.0],
	...	[3, -7, 5.2]
	... ]
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last)
	TypeError: Each row of the matrix must have the same size
