matrix_mul(m_a, m_b) is a function we are going to explore in this test iile
==============================================================================
this function will multiply two matrices and return a product
===============================================================
Now let see how to use a function with exapmples
====================================================================
::
	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
	>>> m_a = [
    	... [2, 4],
    	... [3 5]
    	... ]
    	>>> m_b = [
	... [1, 2],
	... [3, 4]
	...	] 
    	>>> print(matrix_mul(m_a, m_b))
    	[[14, 20], [18, 26]]
    	
	>>> m_a = [[1, 2]]
    	>>> m_b = [
    	... [3, 4],
    	... [5, 6]
    	... ]
    	>>> print(matrix_mul(m_a, m_b))
    	[[13, 16]]

The function also works with floating-point numbers.
::
    	>>> m_a = [
    	... [1.2, 5.5, 6.2],
    	... [4.66, 12.3, -9.2]
    	... ]
    	>>> m_b = [
    	... [5.0, 3.3],
    	... [-2.9, 4.4],
    	... [7.2, 4.4]
    	... ]
    	>>> print(matrix_mul(m_a, m_b))
    	[[34.69, 55.44000000000001], [-78.61, 29.018000000000008]]

Integers and floats can be combined.
::
    	>>> m_a = [
    	... [1, 2.2, 3.3, 4],
    	... [5, 6, 7, 8.8],
    	... ]
    	>>> m_b = [
    	... [1.1, 2, 3.3],
   	... [4.0, 5.5, 6],
    	... [7, 8, 9],
    	... [10.01, 11, 12.3]
    	... ]
    	>>> print(matrix_mul(m_a, m_b))
    	[[73.03999999999999, 84.5, 95.4], [166.58800000000002, 195.8, 223.74]]

A function will work if and only if two arguments given
::
    	>>> print(matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
   	Traceback (most recent call last):
    	TypeError: matrix_mul() missing 2 required positional arguments: 
    	'm_a' and 'm_b'
    	
	>>> print(matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    	Traceback (most recent call last):
    	TypeError: matrix_mul() missing 2 required positional arguments: 
    	'm_a' and 'm_b'

The row of matrix 1 should be equal to the column of matrix 2 otherwise ValueError will raise
::
    	>>> m_a = [
    	... [1, 2],
    	... [3, 4],
    	... ]
    	>>> m_b = [
    	... [1, 2],
   	... [2, 3],
    	... [4, 5]
    	... ]
   	>>> print(matrix_mul(m_a, m_b))
    	Traceback (most recent call last):
    	ValueError: m_a and m_b can't be multiplied

The parameters given cannot be empty. Otherwise, a ValueError
is raised.
::
    	>>> print(matrix_mul([], [[1, 2]]))
    	Traceback (most recent call last):
    	ValueError: m_a can't be empty
    	
	>>> print(matrix_mul([[1, 2]], [[]]))
    	Traceback (most recent call last):
    	ValueError: m_b can't be empty
    	
	>>> print(matrix_mul([[]], []))
   	Traceback (most recent call last):
    	ValueError: m_a can't be empty

if Invalid Matrices is given TypeError will be raised
::
    	>>> print(matrix_mul("hello world", [[1, 2]]))
    	Traceback (most recent call last):
    	TypeError: m_a must be a list
    	
	>>> print(matrix_mul([[1, 2]], "hello world"))
    	Traceback (most recent call last):
    	TypeError: m_b must be a list
    	
	>>> print(matrix_mul("hello world", "good morning"))
    	Traceback (most recent call last):
    	TypeError: m_a must be a list
    	
	>>> print(matrix_mul(None, None))
    	Traceback (most recent call last):
    	TypeError: m_a must be a list

Not only be list but should be a list of list
otherwise TypeError will be raised
::
    	>>> print(matrix_mul([1, 2], [[3, 4]]))
    	Traceback (most recent call last):
    	TypeError: m_a must be a list of lists
    	
	>>> print(matrix_mul([[1, 2]], [3, 4]))
    	Traceback (most recent call last):
   	 TypeError: m_b must be a list of lists
   	 
	>>> print(matrix_mul([1, 2], [3, 4]))
   	Traceback (most recent call last):
    	TypeError: m_a must be a list of lists

Not only be a list of list but it must contain integers or floats!
Otherwise TypeError will raise
::
    	>>> print(matrix_mul([[1, "non-number"]], [[3, 4]]))
    	Traceback (most recent call last):
    	TypeError: m_a should contain only integers or floats
    	
	>>> print(matrix_mul([[1, 2]], [[{"a": 1}, 8.8]]))
    	Traceback (most recent call last):
    	TypeError: m_b should contain only integers or floats
    	
	>>> print(matrix_mul([[1, "non-number"]], [[{"a": 1}, 8.8]]))
    	Traceback (most recent call last):
    	TypeError: m_a should contain only integers or floats

The row of two matrice should be Equal otherwise TypeError will raise
::
    	>>> m_a = [
    	... [1, 2],
    	... [3, 4, 5]
    	... ]
    	>>> m_b = [
   	... [1, 2],
    	... [3, 4]
    	... ]
   	>>> print(matrix_mul(m_a, m_b))
    	Traceback (most recent call last):
    	TypeError: each row of m_a must be of the same size
    	
	>>> m_a = [
   	... ]
   	>>> m_b = [
   	... [1, 2],
   	... [3, 4, 5]
    	... ]
    	>>> print(matrix_mul(m_a, m_b))
    	Traceback (most recent call last):
    	TypeError: each row of m_b must be of the same size
    	
	>>> m_a = [
    	... [1, 2],
    	... [3, 4, 5]
    	... ]
    	>>> m_b = m_a
    	>>> print(matrix_mul(m_a, m_b))
    	Traceback (most recent call last):
    	TypeError: each row of m_a must be of the same size
